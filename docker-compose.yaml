version: "3"
services:
  kinkyapi:
    build:
      context: .
    depends_on:
      - db
      - reverseproxy
    restart: always
    environment:
      MYSQL_USER: "kinkyapi"
      MYSQL_HOST: "db"
      MYSQL_PASS: "${MYSQL_PASS}"
      SECRET_KEY: "${SECRET_KEY}"
      DOMAIN: "${DOMAIN}"
    labels:
      traefik.enable: "true"
      traefik.docker.network: "webproxy"
      traefik.http.routers.kinkyapi.rule: "Host(`kinkyapi.site`) || Host(`localhost`)"
      traefik.http.routers.kinkyapi.entrypoints: "websecure"
      traefik.http.routers.kinkyapi.tls.certresolver: "myresolver"
      traefik.http.routers.kinkyapi.service: "kinkyapi-service"
      traefik.http.services.kinkyapi-service.loadbalancer.server.port: "80"
    networks:
      - webproxy
      - default

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: "kinkyapi"
      MYSQL_USER: "kinkyapi"
      MYSQL_PASSWORD: "${MYSQL_PASS}"
      MYSQL_RANDOM_ROOT_PASSWORD: "yes"
    volumes:
      - "./data/mysql:/var/lib/mysql"

  kinkyapi-task-updateshoots:
    build:
      context: .
    depends_on:
      - db
      - kinkyapi
    environment:
      MYSQL_USER: "kinkyapi"
      MYSQL_HOST: "db"
      MYSQL_PASS: "${MYSQL_PASS}"
      SECRET_KEY: "${SECRET_KEY}"
    entrypoint: /usr/local/bin/python3
    command: ["manage.py", "update_shoots", "--sleep", "86400"]
    restart: always

  reverseproxy:
    image: "traefik:2.2"
    container_name: "traefik"
    ports:
      - "80:80"               # The HTTP port
      - "443:443"             # The HTTPs port
      - "127.0.0.1:8080:8080" # The API port
    volumes:
      - "./data/letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.myresolver.acme.email=${LE_MAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

    labels:
      traefik.enable: "true"
      traefik.docker.network: "webproxy"
      # create a http-catchall dummy router, to redirect any:.* to https
      traefik.http.routers.http-catchall.rule: "HostRegexp(`{any:.*}`)"
      traefik.http.routers.http-catchall.entrypoints: "web"
      traefik.http.routers.http-catchall.middlewares: "redirect-to-https@docker"
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"
    networks:
      - webproxy

networks:
  webproxy:
